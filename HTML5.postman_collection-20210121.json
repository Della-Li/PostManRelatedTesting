{
	"info": {
		"_postman_id": "452f9fc8-d784-4780-8607-1dac80cacabf",
		"name": "HTML5",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Allocation",
			"item": [
				{
					"name": "Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"There should be some data\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    pm.expect(responseJson.records.length).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server_ip}}/api/pages/allocs/read.php",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"allocs",
								"read.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create (locakal only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check response\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    pm.expect(responseJson.message).to.include(\"created\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"alloc_type\": 3,\n \"alloc_cmpycode\": \"10372010\",\n \"alloc_suppcode\" : \"34402\",\n \"alloc_lock\": 3\n}"
						},
						"url": {
							"raw": "https://{{server_ip}}/api/pages/allocs/create.php",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"allocs",
								"create.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check create result (lockal only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check data existence\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    // pm.expect(responseJson.records.length).to.be.above(0);\r",
									"    found = false;\r",
									"    for (i = 0; i < responseJson.records.length; i++) {\r",
									"        if (responseJson.records[i].alloc_type == 3 &&\r",
									"            responseJson.records[i].alloc_cmpycode == '10372010' &&\r",
									"            responseJson.records[i].alloc_suppcode == '34402') {\r",
									"            found = true;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    if (!found) {\r",
									"        pm.expect.fail(\"Cannot find the data just inserted\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server_ip}}/api/pages/allocs/read.php",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"allocs",
								"read.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete (locakal only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check response\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    pm.expect(responseJson.message).to.include(\"deleted\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"alloc_type\": 3,\n \"alloc_cmpycode\": \"10372010\",\n \"alloc_suppcode\" : \"34402\"\n}"
						},
						"url": {
							"raw": "https://{{server_ip}}/api/pages/allocs/delete.php",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"allocs",
								"delete.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create (locakal & allocs)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check response\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    pm.expect(responseJson.message).to.include(\"created\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"alloc_type\": 3,\n \"alloc_cmpycode\": \"10372010\",\n \"alloc_suppcode\" : \"34402\",\n \"alloc_lock\": 3,\n \"allocs\": [\n    {\n        \"aitem_prodcode\" : \"500002856\",\n        \"aitem_qtylimit\" : 1001,\n        \"aitem_produnit\" : 5\n    },\n    {\n        \"aitem_prodcode\" : \"400000385\",\n        \"aitem_qtylimit\" : 2002,\n        \"aitem_produnit\" : 5\n    }\n ]\n}"
						},
						"url": {
							"raw": "https://{{server_ip}}/api/pages/allocs/create.php",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"allocs",
								"create.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check create result (locakal & allocs) lockal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check data existence\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    // pm.expect(responseJson.records.length).to.be.above(0);\r",
									"    found = false;\r",
									"    for (i = 0; i < responseJson.records.length; i++) {\r",
									"        if (responseJson.records[i].alloc_type == 3 &&\r",
									"            responseJson.records[i].alloc_cmpycode == '10372010' &&\r",
									"            responseJson.records[i].alloc_suppcode == '34402') {\r",
									"            found = true;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    if (found) {\r",
									"        \r",
									"    } else {\r",
									"        pm.expect.fail(\"Cannot find the data just inserted\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server_ip}}/api/pages/allocs/read.php",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"allocs",
								"read.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check create result (locakal & allocs) allocs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check data existence\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    // pm.expect(responseJson.records.length).to.be.above(0);\r",
									"    found = false;\r",
									"    for (i = 0; i < responseJson.records.length; i++) {\r",
									"        if (responseJson.records[i].aitem_type == 3 &&\r",
									"            responseJson.records[i].aitem_cmpycode == '10372010' &&\r",
									"            responseJson.records[i].aitem_suppcode == '34402' &&\r",
									"            responseJson.records[i].aitem_prodcode == '400000385') {\r",
									"            pm.expect(responseJson.records[i].aitem_qtylimit).to.equal(2002);\r",
									"            pm.expect(responseJson.records[i].aitem_qtyused).to.equal(0);\r",
									"            pm.expect(responseJson.records[i].aitem_qtyleft).to.equal(2002);\r",
									"            pm.expect(responseJson.records[i].aitem_produnit).to.equal(5);\r",
									"        }\r",
									"        else if (responseJson.records[i].aitem_type == 3 &&\r",
									"            responseJson.records[i].aitem_cmpycode == '10372010' &&\r",
									"            responseJson.records[i].aitem_suppcode == '34402' &&\r",
									"            responseJson.records[i].aitem_prodcode == '500002856') {\r",
									"            pm.expect(responseJson.records[i].aitem_qtylimit).to.equal(1001);\r",
									"            pm.expect(responseJson.records[i].aitem_qtyused).to.equal(0);\r",
									"            pm.expect(responseJson.records[i].aitem_qtyleft).to.equal(1001);\r",
									"            pm.expect(responseJson.records[i].aitem_produnit).to.equal(5);\r",
									"        }\r",
									"    }\r",
									"    \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server_ip}}/api/pages/allocs/alloc_items.php?alloc_type=3&alloc_cmpycode=10372010&alloc_suppcode=34402",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"allocs",
								"alloc_items.php"
							],
							"query": [
								{
									"key": "alloc_type",
									"value": "3"
								},
								{
									"key": "alloc_cmpycode",
									"value": "10372010"
								},
								{
									"key": "alloc_suppcode",
									"value": "34402"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check response\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    pm.expect(responseJson.message).to.include(\"updated\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"alloc_type\": 3,\r\n \"alloc_cmpycode\": \"10372010\",\r\n \"alloc_suppcode\" : \"34402\",\r\n \"alloc_lock\": 4,\r\n \"allocs\": [\r\n    {\r\n        \"aitem_prodcode\" : \"500002856\",\r\n        \"aitem_qtylimit\" : 3003,\r\n        \"aitem_produnit\" : 5\r\n    },\r\n    {\r\n        \"aitem_prodcode\" : \"400000381\",\r\n        \"aitem_qtylimit\" : 4004,\r\n        \"aitem_produnit\" : 5\r\n    }\r\n ]\r\n}"
						},
						"url": {
							"raw": "https://{{server_ip}}/api/pages/allocs/update.php",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"allocs",
								"update.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check update result (locakal & allocs) lockal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check data existence\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    // pm.expect(responseJson.records.length).to.be.above(0);\r",
									"    for (i = 0; i < responseJson.records.length; i++) {\r",
									"        if (responseJson.records[i].alloc_type == 3 &&\r",
									"            responseJson.records[i].alloc_cmpycode == '10372010' &&\r",
									"            responseJson.records[i].alloc_suppcode == '34402') {\r",
									"            pm.expect(responseJson.records[i].alloc_lock).to.equal(4);\r",
									"        }\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server_ip}}/api/pages/allocs/read.php",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"allocs",
								"read.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check update result (locakal & allocs) allocs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check data existence\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    // pm.expect(responseJson.records.length).to.be.above(0);\r",
									"    found = false;\r",
									"    for (i = 0; i < responseJson.records.length; i++) {\r",
									"        if (responseJson.records[i].aitem_type == 3 &&\r",
									"            responseJson.records[i].aitem_cmpycode == '10372010' &&\r",
									"            responseJson.records[i].aitem_suppcode == '34402' &&\r",
									"            responseJson.records[i].aitem_prodcode == '400000381') {\r",
									"            pm.expect(responseJson.records[i].aitem_qtylimit).to.equal(4004);\r",
									"            pm.expect(responseJson.records[i].aitem_qtyused).to.equal(0);\r",
									"            pm.expect(responseJson.records[i].aitem_qtyleft).to.equal(4004);\r",
									"            pm.expect(responseJson.records[i].aitem_produnit).to.equal(5);\r",
									"        }\r",
									"        else if (responseJson.records[i].aitem_type == 3 &&\r",
									"            responseJson.records[i].aitem_cmpycode == '10372010' &&\r",
									"            responseJson.records[i].aitem_suppcode == '34402' &&\r",
									"            responseJson.records[i].aitem_prodcode == '500002856') {\r",
									"            pm.expect(responseJson.records[i].aitem_qtylimit).to.equal(3003);\r",
									"            pm.expect(responseJson.records[i].aitem_qtyused).to.equal(0);\r",
									"            pm.expect(responseJson.records[i].aitem_qtyleft).to.equal(3003);\r",
									"            pm.expect(responseJson.records[i].aitem_produnit).to.equal(5);\r",
									"        }\r",
									"        else if (responseJson.records[i].aitem_type == 3 &&\r",
									"            responseJson.records[i].aitem_cmpycode == '10372010' &&\r",
									"            responseJson.records[i].aitem_suppcode == '34402' &&\r",
									"            responseJson.records[i].aitem_prodcode == '400000385') {\r",
									"            pm.expect(responseJson.records[i].aitem_qtylimit).to.equal(0);\r",
									"        }\r",
									"    }\r",
									"    \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server_ip}}/api/pages/allocs/alloc_items.php?alloc_type=3&alloc_cmpycode=10372010&alloc_suppcode=34402",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"allocs",
								"alloc_items.php"
							],
							"query": [
								{
									"key": "alloc_type",
									"value": "3"
								},
								{
									"key": "alloc_cmpycode",
									"value": "10372010"
								},
								{
									"key": "alloc_suppcode",
									"value": "34402"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check response\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    pm.expect(responseJson.message).to.include(\"updated\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"alloc_type\": 3,\r\n \"alloc_cmpycode\": \"10372010\",\r\n \"alloc_suppcode\" : \"34402\"\r\n}"
						},
						"url": {
							"raw": "https://{{server_ip}}/api/pages/allocs/reset.php",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"allocs",
								"reset.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check reset result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check data existence\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    // pm.expect(responseJson.records.length).to.be.above(0);\r",
									"    found = false;\r",
									"    for (i = 0; i < responseJson.records.length; i++) {\r",
									"        if (responseJson.records[i].aitem_type == 3 &&\r",
									"            responseJson.records[i].aitem_cmpycode == '10372010' &&\r",
									"            responseJson.records[i].aitem_suppcode == '34402' &&\r",
									"            responseJson.records[i].aitem_prodcode == '400000381') {\r",
									"            pm.expect(responseJson.records[i].aitem_qtylimit).to.equal(4004);\r",
									"            pm.expect(responseJson.records[i].aitem_qtyused).to.equal(0);\r",
									"            pm.expect(responseJson.records[i].aitem_qtyleft).to.equal(4004);\r",
									"            pm.expect(responseJson.records[i].aitem_produnit).to.equal(5);\r",
									"            found = true;\r",
									"        }\r",
									"        else if (responseJson.records[i].aitem_type == 3 &&\r",
									"            responseJson.records[i].aitem_cmpycode == '10372010' &&\r",
									"            responseJson.records[i].aitem_suppcode == '34402' &&\r",
									"            responseJson.records[i].aitem_prodcode == '500002856') {\r",
									"            pm.expect(responseJson.records[i].aitem_qtylimit).to.equal(3003);\r",
									"            pm.expect(responseJson.records[i].aitem_qtyused).to.equal(0);\r",
									"            pm.expect(responseJson.records[i].aitem_qtyleft).to.equal(3003);\r",
									"            pm.expect(responseJson.records[i].aitem_produnit).to.equal(5);\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    if (!found) {\r",
									"        pm.expect.fail(\"Cannot find the data just inserted\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server_ip}}/api/pages/allocs/alloc_items.php?alloc_type=3&alloc_cmpycode=10372010&alloc_suppcode=34402",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"allocs",
								"alloc_items.php"
							],
							"query": [
								{
									"key": "alloc_type",
									"value": "3"
								},
								{
									"key": "alloc_cmpycode",
									"value": "10372010"
								},
								{
									"key": "alloc_suppcode",
									"value": "34402"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete (locakal & allocs)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check response\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    pm.expect(responseJson.message).to.include(\"deleted\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"alloc_type\": 3,\n \"alloc_cmpycode\": \"10372010\",\n \"alloc_suppcode\" : \"34402\"\n}"
						},
						"url": {
							"raw": "https://{{server_ip}}/api/pages/allocs/delete.php",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"allocs",
								"delete.php"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Order",
			"item": [
				{
					"name": "Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"There should be some data\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    pm.expect(responseJson.records.length).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{server_ip}}/api/pages/open_order/read.php",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"open_order",
								"read.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "Suppliers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"There should be some data\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    pm.expect(responseJson.records.length).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{server_ip}}/api/pages/open_order/suppliers.php",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"open_order",
								"suppliers.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "Customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"There should be some data\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    pm.expect(responseJson.records.length).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{server_ip}}/api/pages/open_order/supp_customers.php",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"open_order",
								"supp_customers.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "Customers (param)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"There should be some data\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    pm.expect(responseJson.records.length).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{server_ip}}/api/pages/open_order/supp_customers.php?supplier=3440213",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"open_order",
								"supp_customers.php"
							],
							"query": [
								{
									"key": "supplier",
									"value": "3440213"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "transport type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"There should be some data\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    pm.expect(responseJson.records.length).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{server_ip}}/api/pages/open_order/transport_types.php",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"open_order",
								"transport_types.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "carriers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"There should be some data\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    pm.expect(responseJson.records.length).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{server_ip}}/api/pages/open_order/carriers.php",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"open_order",
								"carriers.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "delv locations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"There should be some data\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    pm.expect(responseJson.records.length).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{server_ip}}/api/pages/open_order/delv_locations.php",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"open_order",
								"delv_locations.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "drawers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"There should be some data\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    pm.expect(responseJson.records.length).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{server_ip}}/api/pages/open_order/drawers.php",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"open_order",
								"drawers.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "ship to",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"There should be some data\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    pm.expect(responseJson.records.length).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{server_ip}}/api/pages/open_order/ship_to.php?order_supp_code=3440213",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"open_order",
								"ship_to.php"
							],
							"query": [
								{
									"key": "order_supp_code",
									"value": "3440213"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sold to",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{server_ip}}/api/pages/open_order/sold_to.php?order_supp_code=3440213",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"open_order",
								"sold_to.php"
							],
							"query": [
								{
									"key": "order_supp_code",
									"value": "3440213"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "order items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"There should be some data\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    pm.expect(responseJson.records.length).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{server_ip}}/api/pages/open_order/order_items.php?order_sys_no=22",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"open_order",
								"order_items.php"
							],
							"query": [
								{
									"key": "order_sys_no",
									"value": "22"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "approve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{server_ip}}/api/pages/open_order/approve.php?order_sys_no=24",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"open_order",
								"approve.php"
							],
							"query": [
								{
									"key": "order_sys_no",
									"value": "24"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check approve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check data existence\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    // pm.expect(responseJson.records.length).to.be.above(0);\r",
									"    found = false;\r",
									"    for (i = 0; i < responseJson.records.length; i++) {\r",
									"        if (responseJson.records[i].order_sys_no == 24 ) {\r",
									"            pm.expect(responseJson.records[i].order_approved).to.equal(true);\r",
									"            found = true;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    if (!found) {\r",
									"        pm.expect.fail(\"Cannot find the data just inserted\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{server_ip}}/api/pages/open_order/read.php",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"open_order",
								"read.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "unapprove",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{server_ip}}/api/pages/open_order/unapprove.php?order_sys_no=24",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"open_order",
								"unapprove.php"
							],
							"query": [
								{
									"key": "order_sys_no",
									"value": "24"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "check disapprove",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check data existence\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    // pm.expect(responseJson.records.length).to.be.above(0);\r",
									"    found = false;\r",
									"    for (i = 0; i < responseJson.records.length; i++) {\r",
									"        if (responseJson.records[i].order_sys_no == 24 ) {\r",
									"            pm.expect(responseJson.records[i].order_approved).to.equal(false);\r",
									"            found = true;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    if (!found) {\r",
									"        pm.expect.fail(\"Cannot find the data just inserted\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{server_ip}}/api/pages/open_order/read.php",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"open_order",
								"read.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "next cust order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check data existence\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    pm.expect(responseJson.records.length).to.be.equal(1);\r",
									"    pm.expect(responseJson.records[0].order_cust_no).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{server_ip}}/api/pages/open_order/next_cust_order.php?order_supp_code=3440213",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"open_order",
								"next_cust_order.php"
							],
							"query": [
								{
									"key": "order_supp_code",
									"value": "3440213"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check response\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    pm.expect(responseJson.message).to.include(\"created\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"order_cust_no\": 2468,\r\n\t\"order_cust_acnt\": \"10372152\",\r\n\t\"order_cust_code\": \"10372152\",\r\n\t\"order_supp_code\": \"3440202\",\r\n\t\"order_ord_time\": \"2019-01-01 01:01:01\",\r\n\t\"order_ttyp_id\": \"1\",\r\n\t\"order_stat_id\": \"3\",\r\n\t\"order_styp_id\": \"0\",\r\n\t\"order_dloc_code\": \"\",\r\n\t\"order_ref_code\": \"refcode\",\r\n\t\"order_dlv_time\": \"2020-02-02 02:02:02\",\r\n\t\"order_dtrm_code\": \"H10\",\r\n\t\"order_exp_time\": \"2023-03-03 03:03:03\",\r\n\t\"order_drwr_code\": \"3440202\",\r\n\t\"order_carr_code\": \"12030817\",\r\n\t\"order_trsf_type\": \"TT\",\r\n\t\"order_strm_code\": \"H10\",\r\n\t\"order_strm_name\": \"SHELL HK\",\r\n\t\"order_pay_note\": \"\",\r\n\t\"order_psnl_code\": \"9999\",\r\n\t\"order_src_id\": \"5\",\r\n\t\"order_src_name\": \"Manual\",\r\n\t\"order_sold_to_num\": \"1\",\r\n\t\"order_ship_to_num\": \"2\",\r\n\t\"order_instruction\": \"ins\",\r\n\t\"items\" : [\r\n\t{\r\n\t\t\"oitem_prod_code\": \"400000384\",\r\n\t\t\"oitem_prod_cmpy\": \"3440202\",\r\n\t\t\"oitem_prod_qty\": 6006,\r\n\t\t\"oitem_prod_unit\": 5\r\n\t},\r\n\t{\r\n\t\t\"oitem_prod_code\": \"400001301\",\r\n\t\t\"oitem_prod_cmpy\": \"3440202\",\r\n\t\t\"oitem_prod_qty\": 7007,\r\n\t\t\"oitem_prod_unit\": 5\r\n\t}\r\n\t]\r\n}"
						},
						"url": {
							"raw": "https://{{server_ip}}/api/pages/open_order/create.php",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"open_order",
								"create.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check aftter create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"There should be some data\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    pm.expect(responseJson.records.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Check data existence\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    // pm.expect(responseJson.records.length).to.be.above(0);\r",
									"    found = false;\r",
									"    for (i = 0; i < responseJson.records.length; i++) {\r",
									"        if (responseJson.records[i].order_cust_no == 2468 ) {\r",
									"            pm.expect(responseJson.records[i].order_cust_acnt).to.equal(\"10372152\");\r",
									"            pm.expect(responseJson.records[i].order_cust_code).to.equal(\"10372152\");\r",
									"            pm.expect(responseJson.records[i].order_supp_code).to.equal(\"3440202\");\r",
									"            pm.expect(responseJson.records[i].order_ord_time).to.equal(\"2019-01-01 01:01:01\");\r",
									"            pm.expect(responseJson.records[i].order_ttyp_id).to.equal(\"1\");\r",
									"            pm.expect(responseJson.records[i].order_ref_code).to.equal(\"refcode\");\r",
									"            pm.expect(responseJson.records[i].order_stat_id).to.equal(\"0\");\r",
									"            pm.expect(responseJson.records[i].order_styp_id).to.equal(\"0\");\r",
									"            pm.expect(responseJson.records[i].order_dlv_time).to.equal(\"2020-02-02 02:02:02\");\r",
									"            pm.expect(responseJson.records[i].order_dtrm_code).to.equal(\"H10\");\r",
									"            pm.expect(responseJson.records[i].order_exp_time).to.equal(\"2023-03-03 03:03:03\");\r",
									"            pm.expect(responseJson.records[i].order_drwr_code).to.equal(\"3440202\");\r",
									"            pm.expect(responseJson.records[i].order_carr_code).to.equal(\"12030817\");\r",
									"            pm.expect(responseJson.records[i].order_trsf_type).to.equal(\"TT\");\r",
									"            pm.expect(responseJson.records[i].order_strm_code).to.equal(\"H10\");\r",
									"            pm.expect(responseJson.records[i].order_src_id).to.equal(\"5\");\r",
									"            pm.expect(responseJson.records[i].order_sold_to_num).to.equal(\"1\");\r",
									"            pm.expect(responseJson.records[i].order_ship_to_num).to.equal(\"2\");\r",
									"            pm.expect(responseJson.records[i].order_instruction).to.equal(\"ins\");\r",
									"            pm.globals.set(\"order_sys_no\", responseJson.records[i].order_sys_no);\r",
									"            found = true;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    if (!found) {\r",
									"        pm.expect.fail(\"Cannot find the data just inserted\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{server_ip}}/api/pages/open_order/read.php",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"open_order",
								"read.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check order items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"There should be some data\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    pm.expect(responseJson.records.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Check data existence\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    // pm.expect(responseJson.records.length).to.be.above(0);\r",
									"    found = false;\r",
									"    for (i = 0; i < responseJson.records.length; i++) {\r",
									"        if (responseJson.records[i].oitem_prod_code == \"400001301\" ) {\r",
									"            pm.expect(responseJson.records[i].oitem_prod_qty).to.equal(7007);\r",
									"            pm.expect(responseJson.records[i].oitem_schd_qty).to.equal(0);\r",
									"            pm.expect(responseJson.records[i].oitem_load_qty).to.equal(0);\r",
									"            pm.expect(responseJson.records[i].oitem_delv_qty).to.equal(0);\r",
									"            pm.expect(responseJson.records[i].oitem_prod_unit).to.equal(5);\r",
									"            \r",
									"            found = true;\r",
									"        }\r",
									"        \r",
									"        if (responseJson.records[i].oitem_prod_code == \"400000384\" ) {\r",
									"            pm.expect(responseJson.records[i].oitem_prod_qty).to.equal(6006);\r",
									"            pm.expect(responseJson.records[i].oitem_schd_qty).to.equal(0);\r",
									"            pm.expect(responseJson.records[i].oitem_load_qty).to.equal(0);\r",
									"            pm.expect(responseJson.records[i].oitem_delv_qty).to.equal(0);\r",
									"            pm.expect(responseJson.records[i].oitem_prod_unit).to.equal(5);\r",
									"            \r",
									"            found = true;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    if (!found) {\r",
									"        pm.expect.fail(\"Cannot find the data just inserted\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{server_ip}}/api/pages/open_order/order_items.php?order_sys_no={{order_sys_no}}",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"open_order",
								"order_items.php"
							],
							"query": [
								{
									"key": "order_sys_no",
									"value": "{{order_sys_no}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check response\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    pm.expect(responseJson.message).to.include(\"updated\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"order_sys_no\": {{order_sys_no}},\r\n\t\"order_ttyp_id\": \"2\",\r\n\t\"order_styp_id\": \"0\",\r\n\t\"order_dloc_code\": \"\",\r\n\t\"order_ref_code\": \"refcode2\",\r\n\t\"order_dlv_time\": \"2020-02-12 12:12:12\",\r\n\t\"order_exp_time\": \"2023-03-13 13:13:13\",\r\n\t\"order_drwr_code\": \"3440202\",\r\n\t\"order_carr_code\": \"10371932\",\r\n\t\"order_trsf_type\": \"TT2\",\r\n\t\"order_pay_note\": \"\",\r\n\t\"order_psnl_code\": \"9999\",\r\n\t\"order_src_id\": \"5\",\r\n\t\"order_src_name\": \"Manual\",\r\n\t\"order_sold_to_num\": \"1\",\r\n\t\"order_ship_to_num\": \"2\",\r\n\t\"order_instruction\": \"ins2\",\r\n\t\"items\" : [\r\n\t{\r\n\t\t\"oitem_prod_code\": \"400000384\",\r\n\t\t\"oitem_prod_cmpy\": \"3440202\",\r\n\t\t\"oitem_prod_qty\": 6007,\r\n\t\t\"oitem_prod_unit\": 5\r\n\t},\r\n\t{\r\n\t\t\"oitem_prod_code\": \"400000049\",\r\n\t\t\"oitem_prod_cmpy\": \"3440202\",\r\n\t\t\"oitem_prod_qty\": 7007,\r\n\t\t\"oitem_prod_unit\": 5\r\n\t}\r\n\t]\r\n}"
						},
						"url": {
							"raw": "https://{{server_ip}}/api/pages/open_order/update.php",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"open_order",
								"update.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check aftter update (cust_order)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"There should be some data\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    pm.expect(responseJson.records.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Check data existence\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    // pm.expect(responseJson.records.length).to.be.above(0);\r",
									"    found = false;\r",
									"    for (i = 0; i < responseJson.records.length; i++) {\r",
									"        if (responseJson.records[i].order_cust_no == 2468 ) {\r",
									"            pm.expect(responseJson.records[i].order_supp_code).to.equal(\"3440202\");\r",
									"            pm.expect(responseJson.records[i].order_ord_time).to.equal(\"2019-01-01 01:01:01\");\r",
									"            pm.expect(responseJson.records[i].order_ttyp_id).to.equal(\"2\");\r",
									"            pm.expect(responseJson.records[i].order_ref_code).to.equal(\"refcode2\");\r",
									"            pm.expect(responseJson.records[i].order_stat_id).to.equal(\"0\");\r",
									"            pm.expect(responseJson.records[i].order_styp_id).to.equal(\"0\");\r",
									"            pm.expect(responseJson.records[i].order_dlv_time).to.equal(\"2020-02-12 12:12:12\");\r",
									"            pm.expect(responseJson.records[i].order_dtrm_code).to.equal(\"H10\");\r",
									"            pm.expect(responseJson.records[i].order_exp_time).to.equal(\"2023-03-13 13:13:13\");\r",
									"            pm.expect(responseJson.records[i].order_drwr_code).to.equal(\"3440202\");\r",
									"            pm.expect(responseJson.records[i].order_carr_code).to.equal(\"10371932\");\r",
									"            pm.expect(responseJson.records[i].order_trsf_type).to.equal(\"TT2\");\r",
									"            pm.expect(responseJson.records[i].order_strm_code).to.equal(\"H10\");\r",
									"            pm.expect(responseJson.records[i].order_src_id).to.equal(\"5\");\r",
									"            pm.expect(responseJson.records[i].order_sold_to_num).to.equal(\"1\");\r",
									"            pm.expect(responseJson.records[i].order_ship_to_num).to.equal(\"2\");\r",
									"            pm.expect(responseJson.records[i].order_instruction).to.equal(\"ins2\");\r",
									"            pm.globals.set(\"order_sys_no\", responseJson.records[i].order_sys_no);\r",
									"            found = true;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    if (!found) {\r",
									"        pm.expect.fail(\"Cannot find the data just inserted\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{server_ip}}/api/pages/open_order/read.php",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"open_order",
								"read.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check after update (items)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"There should be some data\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    pm.expect(responseJson.records.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Check data existence\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    // pm.expect(responseJson.records.length).to.be.above(0);\r",
									"    found = false;\r",
									"    for (i = 0; i < responseJson.records.length; i++) {\r",
									"        if (responseJson.records[i].oitem_prod_code == \"400001301\" ) {\r",
									"            pm.expect(responseJson.records[i].oitem_prod_qty).to.equal(0);\r",
									"            pm.expect(responseJson.records[i].oitem_schd_qty).to.equal(0);\r",
									"            pm.expect(responseJson.records[i].oitem_load_qty).to.equal(0);\r",
									"            pm.expect(responseJson.records[i].oitem_delv_qty).to.equal(0);\r",
									"            pm.expect(responseJson.records[i].oitem_prod_unit).to.equal(5);\r",
									"            \r",
									"            found = true;\r",
									"        }\r",
									"        \r",
									"        if (responseJson.records[i].oitem_prod_code == \"400000384\" ) {\r",
									"            pm.expect(responseJson.records[i].oitem_prod_qty).to.equal(6007);\r",
									"            pm.expect(responseJson.records[i].oitem_schd_qty).to.equal(0);\r",
									"            pm.expect(responseJson.records[i].oitem_load_qty).to.equal(0);\r",
									"            pm.expect(responseJson.records[i].oitem_delv_qty).to.equal(0);\r",
									"            pm.expect(responseJson.records[i].oitem_prod_unit).to.equal(5);\r",
									"            \r",
									"            found = true;\r",
									"            break;\r",
									"        }\r",
									"        if (responseJson.records[i].oitem_prod_code == \"400000049\" ) {\r",
									"            pm.expect(responseJson.records[i].oitem_prod_qty).to.equal(7007);\r",
									"            pm.expect(responseJson.records[i].oitem_schd_qty).to.equal(0);\r",
									"            pm.expect(responseJson.records[i].oitem_load_qty).to.equal(0);\r",
									"            pm.expect(responseJson.records[i].oitem_delv_qty).to.equal(0);\r",
									"            pm.expect(responseJson.records[i].oitem_prod_unit).to.equal(5);\r",
									"            \r",
									"            found = true;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    if (!found) {\r",
									"        pm.expect.fail(\"Cannot find the data just inserted\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{server_ip}}/api/pages/open_order/order_items.php?order_sys_no={{order_sys_no}}",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"open_order",
								"order_items.php"
							],
							"query": [
								{
									"key": "order_sys_no",
									"value": "{{order_sys_no}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check response\", function () {\r",
									"    responseJson = JSON.parse(responseBody);\r",
									"    pm.expect(responseJson.message).to.include(\"deleted\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{server_ip}}/api/pages/open_order/delete.php?order_sys_no={{order_sys_no}}",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"pages",
								"open_order",
								"delete.php"
							],
							"query": [
								{
									"key": "order_sys_no",
									"value": "{{order_sys_no}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "login",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\":\"9999\",\n    \"password\":\"12345\"\n}"
						},
						"url": {
							"raw": "https://{{server_ip}}/api/login.php",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"login.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "login Copy",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwZXJfY29kZSI6Ijk5OTkiLCJleHAiOjE1MzcwMjM4MzMsInNlc3NfaWQiOm51bGx9.35Gy9asUBLA3uBbwV9W4QUpaFGS4FHebcA-jTvCeQ5A\"\n}"
						},
						"url": {
							"raw": "https://{{server_ip}}/api/config/get_token.php",
							"protocol": "https",
							"host": [
								"{{server_ip}}"
							],
							"path": [
								"api",
								"config",
								"get_token.php"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Response time is less than 2000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);",
					"});"
				]
			}
		}
	]
}